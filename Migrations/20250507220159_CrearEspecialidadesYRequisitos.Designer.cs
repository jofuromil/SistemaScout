// <auto-generated />
using System;
using BackendScout.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendScout.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250507220159_CrearEspecialidadesYRequisitos")]
    partial class CrearEspecialidadesYRequisitos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("BackendScout.Models.Especialidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("BackendScout.Models.FichaMedica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alergias")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Colegio")
                        .HasColumnType("TEXT");

                    b.Property<string>("CondicionesAlimentarias")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Curso")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Medicamentos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NivelFormacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreContactoEmergencia")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreMadre")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombrePadre")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacionesMedicas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Profesion")
                        .HasColumnType("TEXT");

                    b.Property<string>("SeguroSalud")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoContactoEmergencia")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoMadre")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoPadre")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoSangre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FichasMedicas");
                });

            modelBuilder.Entity("BackendScout.Models.Mensaje", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DirigenteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UnidadId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DirigenteId");

                    b.HasIndex("UnidadId");

                    b.ToTable("Mensajes");
                });

            modelBuilder.Entity("BackendScout.Models.ObjetivoEducativo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EdadMaxima")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EdadMinima")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NivelProgresion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ObjetivosEducativos");
                });

            modelBuilder.Entity("BackendScout.Models.ObjetivoSeleccionado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaSeleccion")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjetivoEducativoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Validado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ObjetivoEducativoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ObjetivosSeleccionados");
                });

            modelBuilder.Entity("BackendScout.Models.Requisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EspecialidadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("Requisitos");
                });

            modelBuilder.Entity("BackendScout.Models.Unidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodigoUnidad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DirigenteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Distrito")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GrupoScout")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("BackendScout.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UnidadId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendScout.Models.Mensaje", b =>
                {
                    b.HasOne("BackendScout.Models.User", "Dirigente")
                        .WithMany()
                        .HasForeignKey("DirigenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.Unidad", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dirigente");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("BackendScout.Models.ObjetivoSeleccionado", b =>
                {
                    b.HasOne("BackendScout.Models.ObjetivoEducativo", "ObjetivoEducativo")
                        .WithMany()
                        .HasForeignKey("ObjetivoEducativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjetivoEducativo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackendScout.Models.Requisito", b =>
                {
                    b.HasOne("BackendScout.Models.Especialidad", "Especialidad")
                        .WithMany("Requisitos")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("BackendScout.Models.Especialidad", b =>
                {
                    b.Navigation("Requisitos");
                });
#pragma warning restore 612, 618
        }
    }
}
